app_identifier = ENV['APPLICATION_ID'] || 'com.shundaojia.myapp'
app_name = ENV['APP_NAME'] || 'MyApp'
xcodeproj = "./#{app_name}.xcodeproj"

lane :build do |options|
    ENV['CI'] = 'true' # 确保是在 CI 环境，否则 xcode 中的脚本不会生效

    # 建议总是开启
    if ENV['SHOULD_POD_REPO_UPDATE'] == 'true'
        # 更新 pod repo
        sh(%(bundle exec pod repo update))
    end

    # 安装 pod 依赖
    cocoapods(
        podfile: "./Podfile",
    )

    # 默认打 qa 环境的包
    environment = ENV['ENVIRONMENT'] || 'qa'
    export_method = (environment == 'production' ? 'app-store' : 'development')
    type = export_method.gsub(/-/, '')

    # 设置 bundle id
    update_app_identifier(
        xcodeproj: xcodeproj,
        plist_path: "#{app_name}/Info.plist", 
        app_identifier: app_identifier
    )

    build_number = ENV['VERSION_CODE'] || '1'
    version_name = ENV['VERSION_NAME'] || '1.0.0'

    # 设置 version code
    increment_build_number(
        build_number: build_number,
        xcodeproj: xcodeproj
    )

    # 设置 version name
    increment_version_number(
        version_number: version_name,
        xcodeproj: xcodeproj
    )

    # 下载 provisioning profile 文件
    match(
        type: 'development', 
        readonly: true, 
        app_identifier: app_identifier,
    )

    match(
        type: type, 
        readonly: true, 
        app_identifier: app_identifier,
    )

    # 清除之前的构建物
    sh(%(cd #{ENV['PWD']} && rm -rf ./build && mkdir build))

    profile_name = ENV["sigh_#{app_identifier}_#{type}_profile-name"] || "match Development #{app_identifier}"

    # 配置签名
    update_code_signing_settings(
        use_automatic_signing: false,
        path: xcodeproj,
        code_sign_identity: export_method == 'app-store' ? "iPhone Distribution" : "iPhone Developer",
        bundle_identifier: app_identifier,
        profile_name: profile_name,
    )

    output_name = "#{environment}-#{version_name}-#{build_number}"
    # 要求项目 scheme 的命名规则是 app 名称 + 空格 + 环境
    scheme = options[:scheme] || "#{app_name} #{environment}"

    # 打包
    gym(
        export_method: export_method,
        include_symbols: true,
        include_bitcode: false,
        xcargs: 'DEBUG_INFORMATION_FORMAT="dwarf-with-dsym"',
        scheme: scheme,
        workspace: "#{app_name}.xcworkspace",
        output_name: output_name,
        clean: true,
        output_directory: "./build"
    )
end

lane :upload_ipa_to_testflight do |options|
    file_name, basename, version_name, build_number, dir_name = app_info
    pilot(
        ipa: file_name,
        # changelog 不能过短，否则会有警告
        changelog: 'This is my changelog of things that have changed in a log.',
    )
end

lane :upload_ipa_to_app_store do |options|
    file_name, basename, version_name, build_number = app_info
    upload_to_app_store(
        app_identifier: app_identifier,
        app_version: "#{version_name}", 
        ipa: file_name
    )
end

lane :upload_debug_symbol_to_sentry do |options|
    file_name, basename, version_name, build_number, dir_name = app_info

    bundle_output = "#{ENV['PWD']}/build/main.jsbundle"
    sourcemap_output = "#{ENV['PWD']}/build/main.jsbundle.map"
    release = "#{app_identifier}@#{version_name}+#{build_number}"

    sh(%(
        sentry-cli --log-level INFO releases new #{release}
    ))

    # upload_sourcemaps
    sh(%(
        sentry-cli --log-level INFO releases files #{release} upload-sourcemaps --dist #{build_number} --rewrite #{sourcemap_output}
    ))
    
    # upload_bundle 
    sh(%(
        sentry-cli --log-level INFO releases files #{release} upload --dist #{build_number} #{bundle_output} "~/main.jsbundle"
    ))

    sh(%(sentry-cli releases finalize #{release}))
   
    # upload_sdym
    sh(%(
        sentry-cli --log-level INFO upload-dif -t dsym --no-bin #{dir_name}
    ))
end

def app_info
    dir_name = "#{ENV['PWD']}/build/*"
    match_extension = '.ipa'
    files = Dir[dir_name]
    file_name = files.find do |file|
        File.extname(file) == match_extension
    end

    basename = File.basename(file_name, match_extension)
    version_name, build_number = basename.split('-').last(2)

    return file_name, basename, version_name, build_number, dir_name
end

