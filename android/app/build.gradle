apply plugin: "com.android.application"
apply plugin: 'channel'
apply plugin: 'io.sentry.android.gradle'

project.ext.sentryCli = [
        logLevel: "debug",
        root: "$rn_root"
]

project.ext.react = [
        entryFile: "app/src/index.ts",
        bundleInRelease: true,
        root: "$rn_root",
        enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

rebuildChannel {
    def flavor = System.getenv("ENVIRONMENT") ?: 'production'
    def baseName = "outputs/apk/${flavor}/release/app-${flavor}-arm64-v8a-release.apk"
    baseReleaseApk = new File(project.buildDir, baseName)
    releaseOutputDir = new File(project.buildDir, "outputs/channels")
}

sentry {
    uploadNativeSymbols false
    autoUpload false
}

def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false)

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId System.getenv("APPLICATION_ID") ?: "com.shundaojia.myapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode((System.getenv("VERSION_CODE") ?: '1').toInteger())
        versionName(System.getenv("VERSION_NAME") ?: '1.0.0')
    }

    splits {
        abi {
            reset()
            enable true
            universalApk false  // If true, also generate a universal APK
            include "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        config {
            keyAlias 'navigation'
            keyPassword '123456'
            storeFile file('./navigation')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }

    flavorDimensions "default"
    productFlavors {
        qa {
            buildConfigField "String", "CODEPUSH_KEY", '"L-XEelCs4LTKQwOK0huftB3JLbp6rkAfA5tcN"'
        }
        production {
            buildConfigField "String", "CODEPUSH_KEY", '"MWyeVC38WoHktu9u4Mg2TQRH8rMOHJaIp9Y5V"'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
	implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation 'com.leon.channel:helper:2.0.1'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)